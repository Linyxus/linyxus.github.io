<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>tutorial on Linro</title>
    <link>https://blog.linyxus.xyz/tags/tutorial/</link>
    <description>Recent content in tutorial on Linro</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Wed, 12 Feb 2020 21:17:00 +0800</lastBuildDate>
    
	<atom:link href="https://blog.linyxus.xyz/tags/tutorial/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>The magic of Laziness: from fibonacci to Y combinator (1)</title>
      <link>https://blog.linyxus.xyz/posts/the-magic-of-laziness/</link>
      <pubDate>Wed, 12 Feb 2020 21:17:00 +0800</pubDate>
      
      <guid>https://blog.linyxus.xyz/posts/the-magic-of-laziness/</guid>
      <description>在这篇博客中，我将简单地介绍许多函数式编程语言中一个重要的，也是独特的特性：Laziness。
A first taste of Laziness 所以，什么是Laziness呢？Laziness有一个更加正式的名称：lazy evaluation，也即 惰性求值 。简单来说，惰性求值意味着，表达式的值不会被立即求出，只有当需要的时候才会对其进行求值。
比如，下面的代码在运行时并不会报错，而可以安全地求出列表的长度。
length [error &amp;#34;Hey!&amp;#34;, error &amp;#34;Here is an error.&amp;#34;] -- 2 原因是，在 length 的实现中，并不关心列表中每个元素的值是什么。因而他们并不会被求值。
length :: [a] -&amp;gt; Int length [] = 0 length (_:xs) = 1 + length xs 这是惰性求值这一特性最为直接的展示。
而在实现上，具有惰性求值特性的代码可以这样被直观地想象：所有的值都被装在一个盒子中，对某个值求值的过程，也就是打开盒子的过程，为了打开这个盒子之后或许我们会发现里面有更多的盒子要打开。而所有的盒子，都会在万不得已的时候才被打开。
这个比喻很直观，但不那么确切。比较精确的说法应当基于两个定义（至少在Haskell中是如此）：Normal Form与Weak Head Normal Form。
Normal Form的定义很简单：normal form表示一个被完全求值的值：代表它所有的部分都已经被完全地求值完毕。 1 ， Just &amp;quot;Hello&amp;quot; ，都是normal form，而 1 + 1 则不是。
Weak Head Normal Formd的定义则要复杂一些。简单来说，所有函数都是WHNF。所有顶层 constructor被求值的表达式也都是WHNF。
举一些简单的例子： (1, 2 + 2) ， (1 + 1) : undefined ， Just 0 都是WHNF，因为他们的顶层constructor都已求值。</description>
    </item>
    
    <item>
      <title>Playing with keyboard on macOS with Karabiner</title>
      <link>https://blog.linyxus.xyz/posts/macos-keyboard-karabiner/</link>
      <pubDate>Thu, 12 Dec 2019 17:28:00 +0800</pubDate>
      
      <guid>https://blog.linyxus.xyz/posts/macos-keyboard-karabiner/</guid>
      <description>本文会简单地介绍 macOS 上的键盘修改工具 Karabiner，并且简单介绍我配置的修改方式。
引子 关于 macOS 的输入法 在macOS上，一直让我很头疼的一件事情是自带的输入法对中文输入不是非常友好。由于对中文输入者而言，在中英文之间切换是相对常见的操作，大多数人习惯使用Shift切换，因为绝大多数中文输入法都默认这一点。但macOS上默认使用Capslock。
这并不是关键之处，让我完全不能好好使用macOS自带输入法的根本原因会在下面提到：我需要把Capslock用作他用。
事实上，第三方输入法我也尝试过，从国产经典的搜狗，到较为小众的落格。搜狗的毛病在于有广告，界面也未免太花里胡哨，而落格的致命之处在于词库实在太难用，有时候首选词叫人完全无法理解，不仅如此，落格最主要的卖点：双拼，也对使用全拼的我毫无吸引力。
通过 Karabiner，可以把Shift配置为我想要的样子。
关于修改CapsLock 修改CapsLock应该是很多程序员的必备操作了。Capslock的位置处于整张键盘上最容易按到的地方之一，却基本是最少使用到的按键，这很不合理。
我们可以把Capslock转而映射到Control（对于Emacs用户）或Escape（对于Vim用户）来很大地提高键盘的使用效率。
之前发现了一个很棒的工具，名为Xcape，能够 同时 把Capslock映射到Control与Escape，这很容易实现——Escape和Control的使用事实上是不重合的，使用场景有明显的差异： Control是修饰键，与其他按键一起按下，而Escape常常是独立按下的。也可以通过按下的时间来区分他们。
很遗憾的是，Xcape 并不支持macOS 。
但 Karabiner 弥补了这一遗憾。
Karabiner的安装 Karabiner
Karabiner 的安装非常简单，直接在官网上下载dmg，双击安装即可。
值得一提的是，Karabiner的官网上也有一个官方整理的 Complex modifications 集合，大多数常用的修改方式只需要 import 这上面的修改即可，修改的定义方式是json，语法也颇为直观，必要时可以修改。
Modification I: 使用Shift切换中英文 利用 Shift 切换中英文有一个很直观的实现：单独按下时，发送Capslock，否则仍然发送 Shift。这个实现在上面提到的集合中就有 现成的。
然而，在使用过程中，我发现了一些问题：在一些情况下，如Chrome和PyCharm，这样的实现会产生一些非常奇怪的Bug：输入的英文皆为大写。尝试解决无果，我转向了第二种方案：类似实现，只不过直接发送切换输入法的快捷键，而不是Capslock。
{ &amp;#34;description&amp;#34;: &amp;#34;Change left_shift to control+option+space if pressed alone (rev 2)&amp;#34;, &amp;#34;manipulators&amp;#34;: [ { &amp;#34;from&amp;#34;: { &amp;#34;key_code&amp;#34;: &amp;#34;left_shift&amp;#34;, &amp;#34;modifiers&amp;#34;: { &amp;#34;optional&amp;#34;: [ &amp;#34;any&amp;#34; ] } }, &amp;#34;to&amp;#34;: [ { &amp;#34;key_code&amp;#34;: &amp;#34;left_shift&amp;#34; } ], &amp;#34;to_if_alone&amp;#34;: [ { &amp;#34;hold_down_milliseconds&amp;#34;: 100, &amp;#34;key_code&amp;#34;: &amp;#34;spacebar&amp;#34;, &amp;#34;modifiers&amp;#34;: [ &amp;#34;left_control&amp;#34;, &amp;#34;left_option&amp;#34; ] } ], &amp;#34;type&amp;#34;: &amp;#34;basic&amp;#34; } ] }  我切换输入法的快捷键是 control + option + space，这样的实现到目前为止完全符合预期，毫无问题。</description>
    </item>
    
    <item>
      <title>Switching From Purcell&#39;s Emacs.d to Spacemacs</title>
      <link>https://blog.linyxus.xyz/posts/to-spacemac/</link>
      <pubDate>Thu, 07 Nov 2019 10:32:00 +0800</pubDate>
      
      <guid>https://blog.linyxus.xyz/posts/to-spacemac/</guid>
      <description>很久以来，我的Emacs配置都基于无比经典的Purcell的 emacs.d。但就在最近，我突然决定切换到 Spacemacs。
我曾用过一段时间的 Spacemacs，或者，确切的说，贯穿了我高二到高三的大部分时光。但彼时对Emacs了解颇少，对Spacemacs的使用也仅限于 uncomment 几个 layer，或是复制粘贴几句配置到 user-config 中。大一之后，一个偶然的契机，我打算更深入地学习Emacs。那时候开始，我一直使用并轻度定制了Purcell的Emacs配置。 Github repo
但老实说，不管是配置的方法还是版本管理，我在这段时间里做的真的有些随便。
切换到 Spacemacs 的理由  Evil! Spacemacs是在emacs中使用evil的最快速的方法之一 系统化的配置，基于 use-package，Purcell的配置方法过于古老不便 Battery included，庞大的社群： Github 上已有18.8k个星星 丰富的文档，相较于 Purcell 的配置基本无可用文档  Migration 事实上，除了一些无关紧要的配置，我几乎可以无痛迁移到 Spacemacs，因为 Spacemacs 的 layer 实在是太齐全丰富了。
日常使用中，我会使用Emacs编辑的文件类型其实不是很多：
 C/C++ Org Haskell \( \LaTeX{} \)  平时虽然Python写得也比较多，但是，PyCharm真香！
上述我要用到的编辑环境，所有在 Spacemacs 中都有现成的 layer 可以用，我要做的只是在 dotspacemacs-configuration-layers 中把他们加上罢了。
迁移过程 首先，删除原来的emacs.d。
rm .emacs.d // my .emacs.d is just a symlink 然后
git clone https://github.com/syl20bnr/spacemacs ~/.emacs.d 打开Emacs。Voila！</description>
    </item>
    
    <item>
      <title>Nix on macOS, Made Easy</title>
      <link>https://blog.linyxus.xyz/posts/nix-on-macos/</link>
      <pubDate>Mon, 28 Oct 2019 15:14:00 +0800</pubDate>
      
      <guid>https://blog.linyxus.xyz/posts/nix-on-macos/</guid>
      <description>What is Nix? 简单来说，Nix是一个纯函数式包管理器。它将函数式的思想应用到了包管理中——每一个package都是一条语句的值，安装、编译包的过程是对表达式求值，而不是借助副作用。一个包一旦编译完成，就是不可变的。所有编译好的包都会被存储于/nix/store/中。
Nix的思想其实很值得体会，也的确能为实际应用带来莫大的方便与效率，但对这些话题的探讨不在本篇文章的范畴之内。
本文的主要陈述了怎样在macOS Catalina下，安装使用nix。
Installation 主要问题 事实上，在macOS Catalina之前，nix的安装都不是一件困难的事情，简简单单，一条指令就能解决：
$ sh &amp;lt;(curl https://nixos.org/nix/install) 然而在Calalina之后，官方默认的安装脚本便失效了。主要原因是：Apple改变了macOS的文件结构，将系统与用户数据挂载到了两个分区，/变为了只读目录。
然而，nix的所有文件都需要放到/nix下，/变为只读直接导致nix无法安装到Catalina上。
解决方法 解决方法参照了这个issue中的讨论与一个Github repo。
简单来说，既然安装脚本无法在根目录中创建文件夹，那我们就先为他创建好/nix，再进行安装。
具体来说，只需要新建一个分区并挂载到/nix即可。
刚刚提到的repo是针对升级Catalina前已安装nix进行recover用的，稍作修改，可以得到在Catalina上安装nix的解决方案。Install Nix on Catalina
具体步骤 首先，clone刚刚给出的repo。
git clone https://github.com/Linyxus/install-nix-on-catalina.git cd install-nix-on-catalina 执行第一个脚本
./step-1 重启电脑，随后执行第二个脚本
./step-2 Voila!
Multi-user installation 使用Proxy的问题 如果在之前的安装中，选择了multi user，也即使用daemon的选项，proxy的使用就会成为一个问题。
为什么一定要用proxy？因为至少在我的环境下，直连cache.nixos.org下载binary的速度实在是太！慢！了！
而Proxy的使用为什么会成为问题呢？因为nix multi user的实现中，各项操作事实上都是由daemon完成的，这意味着即使在安装时设置了proxy，事实上daemon还是直连下载的：
export http_proxy=http://127.0.0.1:1087;export https_proxy=http://127.0.0.1:1087; nix-env -f &amp;#39;&amp;lt;nixpkgs&amp;gt;&amp;#39; -iA cabal-install 这很不友好。
事实上，关于这个问题，在官方的Nix Mannual中有所提及。
 The Nix installer has special handling for these proxy-related environment variables: http_proxy, https_proxy, ftp_proxy, no_proxy, HTTP_PROXY, HTTPS_PROXY, FTP_PROXY, NO_PROXY.</description>
    </item>
    
    <item>
      <title>A Tasteful Tutorial on State Monads</title>
      <link>https://blog.linyxus.xyz/posts/state-monad/</link>
      <pubDate>Mon, 16 Sep 2019 20:47:35 +0800</pubDate>
      
      <guid>https://blog.linyxus.xyz/posts/state-monad/</guid>
      <description> 什么是State Monad？ 简单来说，State Monad能够帮助我们描述涉及状态的计算过程。
一个很经典的例子是在Haskell中获取随机数，如果不使用State Monad，就可能需要写出这样的代码：
getThreeRandInt :: (Int, Int, Int) getThreeRandInt = (x1, x2, x3) where gen = mkStdGen (x1, gen&amp;#39;) = random gen (x2, gen&amp;#39;&amp;#39;) = random gen&amp;#39; (x3, _) = random gen&amp;#39;&amp;#39; 这样的代码很丑。
但借助State Monad，我们可以写出这样的代码。
getThreeRandInt :: (Int, Int, Int) getThreeRandInt = evalState $ liftA3 (,,) getRandom getRandom getRandom where getRandom = state random</description>
    </item>
    
    <item>
      <title>在博客中启用Utterances评论系统</title>
      <link>https://blog.linyxus.xyz/posts/enable-utterances/</link>
      <pubDate>Fri, 09 Aug 2019 20:19:22 +0800</pubDate>
      
      <guid>https://blog.linyxus.xyz/posts/enable-utterances/</guid>
      <description>What&amp;rsquo;s Utterance? Utteranc.es是一个基于Github Issues的评论系统。
先前一直苦于为博客找一个合适的评论系统，Disqus很好，但因为众所周知的原因，国内用起来颇多不便。也想过要自己造一个轮子，但迟迟没有开始。
Utterances几乎是无可挑剔的一个选择：基于Github Issues，便捷无阻。长得也看得过去。
部署到Hugo中 部署方法很简单，可能也就是几分钟的事情，把官网上的HTML复制到模板中就行啦。
&amp;lt;script src=&amp;#34;https://utteranc.es/client.js&amp;#34; repo=&amp;#34;[ENTER REPO HERE]&amp;#34; issue-term=&amp;#34;pathname&amp;#34; theme=&amp;#34;github-light&amp;#34; crossorigin=&amp;#34;anonymous&amp;#34; async&amp;gt; &amp;lt;/script&amp;gt; 值得一提的是，需要为你选中的Github repo安装Utterances的App才能正常工作。</description>
    </item>
    
    <item>
      <title>让Hugo和reStucturedText和睦相处</title>
      <link>https://blog.linyxus.xyz/posts/use-rst-with-hugo/</link>
      <pubDate>Thu, 04 Apr 2019 20:37:33 +0800</pubDate>
      
      <guid>https://blog.linyxus.xyz/posts/use-rst-with-hugo/</guid>
      <description>起因 在写完 这一篇博客 之后，我对Markdown彻底失望了， 尽管它有可爱的Typora和GFM，尽管我已用它写下了无数篇博客。  没错，还是数学公式渲染问题。  Markdown和LaTeX似乎总是两对冤家，因为Markdown滥用的 _ 语法，并且并没有原生的数学公式支持，大部分 Markdown编译器永远无法完善的解决下标和斜体的恩怨情仇。  Hugo家的BlackFriday，也不例外。  我曾在 这篇博客 中自信的以为Hugo官方给出 的Workaround并无必要，天真的以为Hugo的Markdown编译器不存在这样的问题。现在，我知道我错了。  在之前提到的，一篇数学笔记博客中，下面的LaTeX代码在渲染时还是中了 &amp;lt;em&amp;gt; 的枪。  1 $$2 \lim_{k \to+\infty} X_k =A \Leftrightarrow\lim_{k \to+\infty} x_k^{(i)} =a(i), i=1,2,…,n. 3 $$  所以，我打算转移到更健全的rST。至少rST有专门的Math模块，比如上面出错的LaTeX代码在rST中可以毫无问题的展现：  \begin{equation*} \lim_{k \to +\infty} X_k = A \Leftrightarrow \lim_{k \to +\infty} x_k^{(i)} = a(i), i=1,2,\ldots ,n. \end{equation*}  和Markdown相比，rST几乎没有什么弱点。Markdown能做到的事情，rST也无所不能。而很多能力，例如完备无冲突的公式 显示，是过于单薄的Markdown无法企及的。  很幸运的，虽然Hugo内置支持的是Markdown， 但是也能通过调用外部程序支持rST 。 但毕竟rST不是亲儿子，一开始还是会有些小问题：   小问题 LaTeX显示 因为 rst2html 对于数学文本块默认是会进行编译的，转成pdf倒还好，但如果转成HTML，显示的效果就非常难看 （众所周知，HTML对公式的支持非常差）。所以这种任务还是交给MathJax为好，需要修改docutils的配置文件：  1 [html4css1 writer] 2 math-output: mathjax 3  https://cdnjs.</description>
    </item>
    
  </channel>
</rss>