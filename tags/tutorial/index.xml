<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutorial on Linro</title>
    <link>https://blog.linyxus.xyz/tags/tutorial/</link>
    <description>Recent content in Tutorial on Linro</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Mon, 28 Oct 2019 15:14:00 +0800</lastBuildDate>
    
	<atom:link href="https://blog.linyxus.xyz/tags/tutorial/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Nix on macOS, Made Easy</title>
      <link>https://blog.linyxus.xyz/posts/nix-on-macos/</link>
      <pubDate>Mon, 28 Oct 2019 15:14:00 +0800</pubDate>
      
      <guid>https://blog.linyxus.xyz/posts/nix-on-macos/</guid>
      <description>What is Nix? 简单来说，Nix是一个纯函数式包管理器。它将函数式的思想应用到了包管理中——每一个package都是一条语句的值，安装、编译包的过程是对表达式求值，而不是借助副作用。一个包一旦编译完成，就是不可变的。所有编译好的包都会被存储于/nix/store/中。
Nix的思想其实很值得体会，也的确能为实际应用带来莫大的方便与效率，但对这些话题的探讨不在本篇文章的范畴之内。
本文的主要陈述了怎样在macOS Catalina下，安装使用nix。
Installation 主要问题 事实上，在macOS Catalina之前，nix的安装都不是一件困难的事情，简简单单，一条指令就能解决：
$ sh &amp;lt;(curl https://nixos.org/nix/install) 然而在Calalina之后，官方默认的安装脚本便失效了。主要原因是：Apple改变了macOS的文件结构，将系统与用户数据挂载到了两个分区，/变为了只读目录。
然而，nix的所有文件都需要放到/nix下，/变为只读直接导致nix无法安装到Catalina上。
解决方法 解决方法参照了这个issue中的讨论与一个Github repo。
简单来说，既然安装脚本无法在根目录中创建文件夹，那我们就先为他创建好/nix，再进行安装。
具体来说，只需要新建一个分区并挂载到/nix即可。
刚刚提到的repo是针对升级Catalina前已安装nix进行recover用的，稍作修改，可以得到在Catalina上安装nix的解决方案。Install Nix on Catalina
具体步骤 首先，clone刚刚给出的repo。
git clone https://github.com/Linyxus/install-nix-on-catalina.git cd install-nix-on-catalina 执行第一个脚本
./step-1 重启电脑，随后执行第二个脚本
./step-2 Voila!
Multi-user installation 使用Proxy的问题 如果在之前的安装中，选择了multi user，也即使用daemon的选项，proxy的使用就会成为一个问题。
为什么一定要用proxy？因为至少在我的环境下，直连cache.nixos.org下载binary的速度实在是太！慢！了！
而Proxy的使用为什么会成为问题呢？因为nix multi user的实现中，各项操作事实上都是由daemon完成的，这意味着即使在安装时设置了proxy，事实上daemon还是直连下载的：
export http_proxy=http://127.0.0.1:1087;export https_proxy=http://127.0.0.1:1087; nix-env -f &amp;#39;&amp;lt;nixpkgs&amp;gt;&amp;#39; -iA cabal-install 这很不友好。
事实上，关于这个问题，在官方的Nix Mannual中有所提及。
 The Nix installer has special handling for these proxy-related environment variables: http_proxy, https_proxy, ftp_proxy, no_proxy, HTTP_PROXY, HTTPS_PROXY, FTP_PROXY, NO_PROXY.</description>
    </item>
    
    <item>
      <title>A Tasteful Tutorial on State Monads</title>
      <link>https://blog.linyxus.xyz/posts/state-monad/</link>
      <pubDate>Mon, 16 Sep 2019 20:47:35 +0800</pubDate>
      
      <guid>https://blog.linyxus.xyz/posts/state-monad/</guid>
      <description> 什么是State Monad？ 简单来说，State Monad能够帮助我们描述涉及状态的计算过程。
一个很经典的例子是在Haskell中获取随机数，如果不使用State Monad，就可能需要写出这样的代码：
getThreeRandInt :: (Int, Int, Int) getThreeRandInt = (x1, x2, x3) where gen = mkStdGen (x1, gen&amp;#39;) = random gen (x2, gen&amp;#39;&amp;#39;) = random gen&amp;#39; (x3, _) = random gen&amp;#39;&amp;#39; 这样的代码很丑。
但借助State Monad，我们可以写出这样的代码。
getThreeRandInt :: (Int, Int, Int) getThreeRandInt = evalState $ liftA3 (,,) getRandom getRandom getRandom where getRandom = state random</description>
    </item>
    
    <item>
      <title>在博客中启用Utterances评论系统</title>
      <link>https://blog.linyxus.xyz/posts/enable-utterances/</link>
      <pubDate>Fri, 09 Aug 2019 20:19:22 +0800</pubDate>
      
      <guid>https://blog.linyxus.xyz/posts/enable-utterances/</guid>
      <description>What&amp;rsquo;s Utterance? Utteranc.es是一个基于Github Issues的评论系统。
先前一直苦于为博客找一个合适的评论系统，Disqus很好，但因为众所周知的原因，国内用起来颇多不便。也想过要自己造一个轮子，但迟迟没有开始。
Utterances几乎是无可挑剔的一个选择：基于Github Issues，便捷无阻。长得也看得过去。
部署到Hugo中 部署方法很简单，可能也就是几分钟的事情，把官网上的HTML复制到模板中就行啦。
&amp;lt;script src=&amp;#34;https://utteranc.es/client.js&amp;#34; repo=&amp;#34;[ENTER REPO HERE]&amp;#34; issue-term=&amp;#34;pathname&amp;#34; theme=&amp;#34;github-light&amp;#34; crossorigin=&amp;#34;anonymous&amp;#34; async&amp;gt; &amp;lt;/script&amp;gt; 值得一提的是，需要为你选中的Github repo安装Utterances的App才能正常工作。</description>
    </item>
    
    <item>
      <title>让Hugo和reStucturedText和睦相处</title>
      <link>https://blog.linyxus.xyz/posts/use-rst-with-hugo/</link>
      <pubDate>Thu, 04 Apr 2019 20:37:33 +0800</pubDate>
      
      <guid>https://blog.linyxus.xyz/posts/use-rst-with-hugo/</guid>
      <description>起因 在写完 这一篇博客 之后，我对Markdown彻底失望了， 尽管它有可爱的Typora和GFM，尽管我已用它写下了无数篇博客。  没错，还是数学公式渲染问题。  Markdown和LaTeX似乎总是两对冤家，因为Markdown滥用的 _ 语法，并且并没有原生的数学公式支持，大部分 Markdown编译器永远无法完善的解决下标和斜体的恩怨情仇。  Hugo家的BlackFriday，也不例外。  我曾在 这篇博客 中自信的以为Hugo官方给出 的Workaround并无必要，天真的以为Hugo的Markdown编译器不存在这样的问题。现在，我知道我错了。  在之前提到的，一篇数学笔记博客中，下面的LaTeX代码在渲染时还是中了 &amp;lt;em&amp;gt; 的枪。  1 $$2 \lim_{k \to+\infty} X_k =A \Leftrightarrow\lim_{k \to+\infty} x_k^{(i)} =a(i), i=1,2,…,n. 3 $$  所以，我打算转移到更健全的rST。至少rST有专门的Math模块，比如上面出错的LaTeX代码在rST中可以毫无问题的展现：  \begin{equation*} \lim_{k \to +\infty} X_k = A \Leftrightarrow \lim_{k \to +\infty} x_k^{(i)} = a(i), i=1,2,\ldots ,n. \end{equation*}  和Markdown相比，rST几乎没有什么弱点。Markdown能做到的事情，rST也无所不能。而很多能力，例如完备无冲突的公式 显示，是过于单薄的Markdown无法企及的。  很幸运的，虽然Hugo内置支持的是Markdown， 但是也能通过调用外部程序支持rST 。 但毕竟rST不是亲儿子，一开始还是会有些小问题：   小问题 LaTeX显示 因为 rst2html 对于数学文本块默认是会进行编译的，转成pdf倒还好，但如果转成HTML，显示的效果就非常难看 （众所周知，HTML对公式的支持非常差）。所以这种任务还是交给MathJax为好，需要修改docutils的配置文件：  1 [html4css1 writer] 2 math-output: mathjax 3  https://cdnjs.</description>
    </item>
    
  </channel>
</rss>